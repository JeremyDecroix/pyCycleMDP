import numpy as np

from pycycle.maps.map_data import MapData


"""Python version of HBTF LPC map from NPSS"""
LPCMap = MapData()

# Map design point values
LPCMap.defaults = {}
LPCMap.defaults['alphaMap'] = 0.0
LPCMap.defaults['NcMap'] = 1.000
LPCMap.defaults['PR'] = 2.246
LPCMap.defaults['RlineMap'] = 2.150
LPCMap.RlineStall = 1.0

LPCMap.alphaMap = np.array([0.000, 1.000])
LPCMap.NcMap = np.array([0.300, 0.400, 0.500, 0.600, 0.700, 0.750, 0.800, 0.850, 0.900, 0.950, 1.000, 1.050, 1.100, 1.150])
LPCMap.RlineMap = np.array([1.000,    1.200,    1.400,    1.600,    1.800,    2.000, 2.200,    2.400,    2.600,    2.800,    3.000]) 

LPCMap.WcMap = np.array([[[ 17.294,   18.593,   19.870,   21.126,   22.358,   23.565, 24.746,   25.901,   27.028,   28.127,   29.195],
  [23.915,   25.564,   27.165,   28.717,   30.216,   31.662, 33.052,   34.384,   35.658,   36.871,   38.024],
  [31.302,   33.175,   34.965,   36.667,   38.280,   39.800, 41.227,   42.560,   43.797,   44.938,   45.984],
  [39.383,   41.431,   43.344,   45.117,   46.749,   48.240, 49.589,   50.796,   51.864,   52.794,   53.589],
  [48.299,   50.504,   52.496,   54.275,   55.842,   57.199, 58.350,   59.300,   60.055,   60.623,   61.011],
  [53.288,   55.529,   57.511,   59.235,   60.705,   61.926, 62.905,   63.651,   64.175,   64.486,   64.598],
  [58.433,   60.711,   62.671,   64.318,   65.660,   66.706, 67.470,   67.964,   68.204,   68.234,   68.234],
  [63.937,   66.150,   68.038,   69.608,   70.869,   71.831, 72.509,   72.915,   73.067,   73.069,   73.069],
  [70.053,   72.032,   73.711,   75.095,   76.194,   77.019, 77.581,   77.894,   77.976,   77.976,   77.976],
  [77.300,   78.693,   79.876,   80.854,   81.634,   82.222, 82.627,   82.856,   82.919,   82.919,   82.919],
  [84.611,   85.403,   86.082,   86.648,   87.107,   87.460, 87.711,   87.865,   87.923,   87.924,   87.924],
  [89.463,   89.803,   90.104,   90.367,   90.594,   90.783, 90.937,   91.055,   91.140,   91.190,   91.208],
  [93.679,   93.752,   93.821,   93.886,   93.947,   94.004, 94.057,   94.105,   94.150,   94.191,   94.228],
  [96.091,   96.080,   96.069,   96.057,   96.045,   96.033, 96.021,   96.008,   95.996,   95.982,   95.969]],
  [[ 17.294,   18.593,   19.870,   21.126,   22.358,   23.565, 24.746,   25.901,   27.028,   28.127,   29.195],
  [23.915,   25.564,   27.165,   28.717,   30.216,   31.662, 33.052,   34.384,   35.658,   36.871,   38.024],
  [31.302,   33.175,   34.965,   36.667,   38.280,   39.800, 41.227,   42.560,   43.797,   44.938,   45.984],
  [39.383,   41.431,   43.344,   45.117,   46.749,   48.240, 49.589,   50.796,   51.864,   52.794,   53.589],
  [48.299,   50.504,   52.496,   54.275,   55.842,   57.199, 58.350,   59.300,   60.055,   60.623,   61.011],
  [53.288,   55.529,   57.511,   59.235,   60.705,   61.926, 62.905,   63.651,   64.175,   64.486,   64.598],
  [58.433,   60.711,   62.671,   64.318,   65.660,   66.706, 67.470,   67.964,   68.204,   68.234,   68.234],
  [63.937,   66.150,   68.038,   69.608,   70.869,   71.831, 72.509,   72.915,   73.067,   73.069,   73.069],
  [70.053,   72.032,   73.711,   75.095,   76.194,   77.019, 77.581,   77.894,   77.976,   77.976,   77.976],
  [77.300,   78.693,   79.876,   80.854,   81.634,   82.222, 82.627,   82.856,   82.919,   82.919,   82.919],
  [84.611,   85.403,   86.082,   86.648,   87.107,   87.460, 87.711,   87.865,   87.923,   87.924,   87.924],
  [89.463,   89.803,   90.104,   90.367,   90.594,   90.783, 90.937,   91.055,   91.140,   91.190,   91.208],
  [93.679,   93.752,   93.821,   93.886,   93.947,   94.004, 94.057,   94.105,   94.150,   94.191,   94.228],
  [96.091,   96.080,   96.069,   96.057,   96.045,   96.033, 96.021,   96.008,   95.996,   95.982,   95.969]]])

LPCMap.effMap = np.array([[[.8038, .8208, .8331, .8395, .8385, .8281, .8055, .7668, .7058, .6125, .4697],
  [.8168, .8348, .8481, .8557, .8562, .8476, .8274, .7919, .7353, .6484, .5160],
  [.8327, .8506, .8641, .8724, .8739, .8672, .8498, .8187, .7690, .6929, .5782],
  [.8452, .8639, .8784, .8877, .8906, .8856, .8705, .8426, .7974, .7283, .6247],
  [.8508, .8714, .8876, .8985, .9030, .8994, .8858, .8595, .8163, .7499, .6507],
  [.8520, .8735, .8906, .9024, .9076, .9047, .8917, .8660, .8236, .7584, .6615],
  [.8514, .8742, .8924, .9051, .9111, .9087, .8960, .8705, .8281, .7630, .6662],
  [.8612, .8816, .8978, .9090, .9142, .9122, .9015, .8803, .8457, .7940, .7194],
  [.8737, .8903, .9034, .9122, .9162, .9143, .9058, .8894, .8635, .8258, .7733],
  [.8896, .8998, .9074, .9123, .9140, .9121, .9063, .8962, .8809, .8599, .8321],
  [.8999, .9044, .9076, .9093, .9094, .9077, .9042, .8987, .8910, .8809, .8682],
  [.8972, .8980, .8982, .8980, .8972, .8959, .8940, .8916, .8885, .8849, .8805],
  [.8865, .8862, .8859, .8854, .8850, .8845, .8839, .8832, .8826, .8818, .8810],
  [.8765, .8767, .8768, .8770, .8771, .8772, .8774, .8775, .8776, .8778, .8779]],
  [[.8038, .8208, .8331, .8395, .8385, .8281, .8055, .7668, .7058, .6125, .4697],
  [.8168, .8348, .8481, .8557, .8562, .8476, .8274, .7919, .7353, .6484, .5160],
  [.8327, .8506, .8641, .8724, .8739, .8672, .8498, .8187, .7690, .6929, .5782],
  [.8452, .8639, .8784, .8877, .8906, .8856, .8705, .8426, .7974, .7283, .6247],
  [.8508, .8714, .8876, .8985, .9030, .8994, .8858, .8595, .8163, .7499, .6507],
  [.8520, .8735, .8906, .9024, .9076, .9047, .8917, .8660, .8236, .7584, .6615],
  [.8514, .8742, .8924, .9051, .9111, .9087, .8960, .8705, .8281, .7630, .6662],
  [.8612, .8816, .8978, .9090, .9142, .9122, .9015, .8803, .8457, .7940, .7194],
  [.8737, .8903, .9034, .9122, .9162, .9143, .9058, .8894, .8635, .8258, .7733],
  [.8896, .8998, .9074, .9123, .9140, .9121, .9063, .8962, .8809, .8599, .8321],
  [.8999, .9044, .9076, .9093, .9094, .9077, .9042, .8987, .8910, .8809, .8682],
  [.8972, .8980, .8982, .8980, .8972, .8959, .8940, .8916, .8885, .8849, .8805],
  [.8865, .8862, .8859, .8854, .8850, .8845, .8839, .8832, .8826, .8818, .8810],
  [.8765, .8767, .8768, .8770, .8771, .8772, .8774, .8775, .8776, .8778, .8779]]])

LPCMap.PRmap = np.array([[[1.0820,  1.0783,  1.0739,  1.0689,  1.0633,  1.0571,  1.0502, 1.0428,  1.0347,  1.0261,  1.0170],
  [1.1503,  1.1436,  1.1358,  1.1268,  1.1166,  1.1054,  1.0930, 1.0797,  1.0653,  1.0501,  1.0339],
  [1.2428,  1.2321,  1.2196,  1.2053,  1.1893,  1.1717,  1.1525, 1.1318,  1.1098,  1.0864,  1.0618],
  [1.3681,  1.3522,  1.3336,  1.3124,  1.2887,  1.2625,  1.2341, 1.2036,  1.1712,  1.1370,  1.1012],
  [1.5411,  1.5189,  1.4924,  1.4619,  1.4274,  1.3892,  1.3477, 1.3032,  1.2560,  1.2063,  1.1545],
  [1.6516,  1.6259,  1.5948,  1.5585,  1.5173,  1.4716,  1.4218, 1.3684,  1.3117,  1.2521,  1.1902],
  [1.7831,  1.7534,  1.7169,  1.6738,  1.6245,  1.5695,  1.5094, 1.4448,  1.3763,  1.3046,  1.2301],
  [1.9324,  1.8986,  1.8574,  1.8094,  1.7548,  1.6941,  1.6281, 1.5574,  1.4827,  1.4046,  1.3237],
  [2.1082,  2.0698,  2.0243,  1.9720,  1.9135,  1.8490,  1.7794, 1.7053,  1.6272,  1.5457,  1.4615],
  [2.3098,  2.2681,  2.2214,  2.1696,  2.1132,  2.0525,  1.9879, 1.9198,  1.8486,  1.7747,  1.6984],
  [2.5142,  2.4742,  2.4313,  2.3855,  2.3370,  2.2859,  2.2326, 2.1771,  2.1197,  2.0604,  1.9996],
  [2.6468,  2.6167,  2.5857,  2.5537,  2.5208,  2.4871,  2.4525, 2.4173,  2.3812,  2.3446,  2.3072],
  [2.7607,  2.7485,  2.7363,  2.7239,  2.7115,  2.6990,  2.6864, 2.6737,  2.6609,  2.6480,  2.6351],
  [2.8258,  2.8290,  2.8323,  2.8355,  2.8387,  2.8419,  2.8451, 2.8483,  2.8515,  2.8547,  2.8579]],
  [[1.0820,  1.0783,  1.0739,  1.0689,  1.0633,  1.0571,  1.0502, 1.0428,  1.0347,  1.0261,  1.0170],
  [1.1503,  1.1436,  1.1358,  1.1268,  1.1166,  1.1054,  1.0930, 1.0797,  1.0653,  1.0501,  1.0339],
  [1.2428,  1.2321,  1.2196,  1.2053,  1.1893,  1.1717,  1.1525, 1.1318,  1.1098,  1.0864,  1.0618],
  [1.3681,  1.3522,  1.3336,  1.3124,  1.2887,  1.2625,  1.2341, 1.2036,  1.1712,  1.1370,  1.1012],
  [1.5411,  1.5189,  1.4924,  1.4619,  1.4274,  1.3892,  1.3477, 1.3032,  1.2560,  1.2063,  1.1545],
  [1.6516,  1.6259,  1.5948,  1.5585,  1.5173,  1.4716,  1.4218, 1.3684,  1.3117,  1.2521,  1.1902],
  [1.7831,  1.7534,  1.7169,  1.6738,  1.6245,  1.5695,  1.5094, 1.4448,  1.3763,  1.3046,  1.2301],
  [1.9324,  1.8986,  1.8574,  1.8094,  1.7548,  1.6941,  1.6281, 1.5574,  1.4827,  1.4046,  1.3237],
  [2.1082,  2.0698,  2.0243,  1.9720,  1.9135,  1.8490,  1.7794, 1.7053,  1.6272,  1.5457,  1.4615],
  [2.3098,  2.2681,  2.2214,  2.1696,  2.1132,  2.0525,  1.9879, 1.9198,  1.8486,  1.7747,  1.6984],
  [2.5142,  2.4742,  2.4313,  2.3855,  2.3370,  2.2859,  2.2326, 2.1771,  2.1197,  2.0604,  1.9996],
  [2.6468,  2.6167,  2.5857,  2.5537,  2.5208,  2.4871,  2.4525, 2.4173,  2.3812,  2.3446,  2.3072],
  [2.7607,  2.7485,  2.7363,  2.7239,  2.7115,  2.6990,  2.6864, 2.6737,  2.6609,  2.6480,  2.6351],
  [2.8258,  2.8290,  2.8323,  2.8355,  2.8387,  2.8419,  2.8451, 2.8483,  2.8515,  2.8547,  2.8579]]])

#LPCMap.Nc_data, LPCMap.alpha_data, LPCMap.Rline_data = np.meshgrid(LPCMap.Nc_vals, LPCMap.alpha_vals, LPCMap.Rline_vals, sparse=False)
LPCMap.Npts = LPCMap.NcMap.size

LPCMap.units = {}
LPCMap.units['NcMap'] = 'rpm'
LPCMap.units['WcMap'] = 'lbm/s'

# format for new regular grid interpolator:

LPCMap.param_data = []
LPCMap.output_data = []

LPCMap.param_data.append({'name': 'alphaMap', 'values': LPCMap.alphaMap,
                          'default': 0, 'units': None})
LPCMap.param_data.append({'name': 'NcMap', 'values': LPCMap.NcMap,
                          'default': 1.0, 'units': 'rpm'})
LPCMap.param_data.append({'name': 'RlineMap', 'values': LPCMap.RlineMap,
                          'default': 2.150, 'units': None})

LPCMap.output_data.append({'name': 'WcMap', 'values': LPCMap.WcMap,
                           'default': np.mean(LPCMap.WcMap), 'units': 'lbm/s'})
LPCMap.output_data.append({'name': 'effMap', 'values': LPCMap.effMap,
                           'default': np.mean(LPCMap.effMap), 'units': None})
LPCMap.output_data.append({'name': 'PRmap', 'values': LPCMap.PRmap,
                           'default': 2.246, 'units': None})
